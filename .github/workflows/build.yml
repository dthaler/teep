# For documentation on the github environment, see
# https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
#
# For documentation on the syntax of this file, see
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: MSBuild

on: pull_request

concurrency:
      # Cancel any builds currently in progress for the same PR.
      # Allow running concurrently for with any other commits.
      group: ci-${{ github.event.pull_request.number || github.sha }}
      cancel-in-progress: true

jobs:
  build_ubuntu:
    strategy:
      matrix:
        configurations: [DebugStandalone]
        os: [ubuntu-22.04]
    runs-on: ${{matrix.os}}
    env:
      # Configuration type to build.
      # You can convert this to a build matrix if you need coverage of multiple configuration types.
      # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
      BUILD_CONFIGURATION: ${{matrix.configurations}}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    #- name: Configure OpenSSL
    #  working-directory: ${{github.workspace}}/external/openssl
    #  run: ./config
    #
    #- name: Build OpenSSL
    #  working-directory: ${{github.workspace}}/external/openssl
    #  run: make
    #
    #- name: Install OpenSSL
    #  working-directory: ${{github.workspace}}/external/openssl
    #  run: make install

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        mkdir build
        cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_CONFIGURATION}}
        cmake --build build -j $(nproc)

    - name: Run Unit Tests
      working-directory: ./build
      run: ./TeepUnitTest -s

  build_windows:
    timeout-minutes: 30
    strategy:
      matrix:
        configurations: [DebugStandalone]
        os: [windows-2019, windows-2022]
    runs-on: ${{matrix.os}}
    env:
      # Path to the solution file relative to the root of the project.
      SOLUTION_FILE_PATH: teep.sln

      # Configuration type to build.
      # You can convert this to a build matrix if you need coverage of multiple configuration types.
      # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
      BUILD_CONFIGURATION: ${{matrix.configurations}}

      BUILD_PLATFORM: x64

    steps:
    # https://stackoverflow.com/questions/65164060/install-nasm-on-github-windows-job
    - name: Install NASM
      run: |
        choco install nasm
        echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - uses: ilammy/msvc-dev-cmd@v1

    - uses: shogo82148/actions-setup-perl@v1

    - name: Prepare the OpenSSL build directory
      working-directory: ${{github.workspace}}/external/openssl
      run: mkdir _build

    - name: Configure OpenSSL
      working-directory: ${{github.workspace}}/external/openssl/_build
      run: |
        perl ..\Configure VC-WIN64A
        perl configdata.pm --dump

    - name: Build OpenSSL
      working-directory: ${{github.workspace}}/external/openssl/_build
      run: nmake # verbose, so no /S here

    - name: Install OpenSSL
      working-directory: ${{github.workspace}}/external/openssl/_build
      run: nmake install

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

        #- name: Install Open Enclave VSIX
        #run:  |
        #curl -fsSL -o OE.vsix https://marketplace.visualstudio.com/_apis/public/gallery/publishers/MS-TCPS/vsextensions/OpenEnclaveSDK-VSIX/0.17.37/vspackage
        #VSIXInstaller.exe /q /a "OE.vsix"

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} /p:Analysis='True' ${{env.SOLUTION_FILE_PATH}}

    - name: Run Unit Tests
      working-directory: ./bin/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      run: ./TeepUnitTest.exe -s
